'use strict';

window.onload = function() {
  ui.setup();
}

const el=(domstring)=>{
  const html = new DOMParser().parseFromString( domstring , 'text/html');
  return html.body.firstChild;
};

const api={
   _fetch: async(apifx='',method='POST',data)=>{
    // const uri=window.location.href + 'api' + apifx;
    const uri= 'http://hauskontrol.local/api' + apifx;
    const options= {
      method: method, // *GET, POST, PUT, DELETE, etc.
      mode: 'cors', // no-cors, *cors, same-origin
      cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached
      credentials: 'same-origin', // include, *same-origin, omit
      headers: {'Content-Type': 'application/json'},
      redirect: 'follow', // manual, *follow, error
      referrer: 'client', // no-referrer, *client
      body: JSON.stringify(data) // body data type must match "Content-Type" header
    };

    let response = await fetch(uri, options);
    let _data = await response.json();

    return _data; // parses JSON response into native JavaScript objects
  },
  addTask: (_task, _id, _payload)=>{
    return api._fetch("/task","POST",{
      task: _task,
      id: _id,
      payload: _payload
    });
  },
  getDeviceList: ()=>{
    return api._fetch().then(data=>{
      console.log(data);
      return data;
    });
  },
  link: ()=>{}
};

const scenes = {
  NORMAL:  0,
  GOODBYE: 1,
  SLEEP:   2,
  DRAGON:  3,
  WELCOME: 4
};

//device type
const devType = {
  undefined : 0, //not defined device (error!)
  light : 1, //light (use initializer to multiplex)
  env   : 2, //Environment
  fan   : 3, //fan 
  ac    : 4, //air conditioner
  bell  : 5  //door bell
};

//zones
const zones = {
  server  : 0,
  living  : 1,
  suite   : 2,
  office  : 3,
  kitchen : 4,
  door    : 5,
  outside : 6
};

//tasks
const tasks = {
  not_defined    :  0,
  request_update :  1,
  update_device  :  2,
  set_device     :  3,
  play_scene     :  4,
  set_scene      :  5,
  rf_send        :  6,
  ir_send        :  7,
  rf_query       :  8,
  scene_pause    :  9,
  set_on         : 10,
  fan_on         : 11,
  fan_speed      : 12
};

const enumToString= (enm, id)=>{
  for(const i in  enm){
    if(id==enm[i]) return i;
  }
};


let main = {
  currentScene: scenes.NORMAL,
  lastUpdate: 0,
  serverapi: "http://hauskontrol.local/api"
};



const rooms = {
  wrapper: undefined,
  selected: 0,
  list: [
    {id:1, name:"living", selected: false, elem: undefined},
    {id:2, name:"suite"},
    {id:3, name:"office"},
    {id:4, name:"kitchen"}
  ],

  setup: ()=>{
    rooms.wrapper=document.querySelector("div.wrapper>div.rooms");
    for (const room of rooms.list) {
      let btn=document.createElement("div");
      btn.className=room.name;
      btn.innerText=room.label||room.name||"room";
      btn.addEventListener("click", ()=>rooms.select(room.id), true);
      room.elem=btn;
      rooms.wrapper.appendChild(room.elem);
    };
    rooms.select(rooms.list[0].id);
  },
  
  select: zone=>{
    if(zone==rooms.selected) return;
    rooms.selected=zone;

    //select new zone
    rooms.wrapper
      .querySelectorAll(".on")
      .forEach(x=>x.classList.remove("on"));
    rooms.list.find(x=>x.id==zone).elem.classList.add("on");

    //place devices
    const panel = document.querySelector("div.panel");
    panel.innerHTML='';
    devices.byZone(zone).forEach(dev=>{
      if(dev.elem) 
        panel.appendChild(dev.elem);
    });
}

}

class AC{
  constructor(dev){
    //core
    this.id=dev.id;
    this.zone=dev.zone;
    this.on=dev.on;
    this.name=dev.name||"AC";

    //ac properties
    this.temp=dev.temp||23;
    this.fan=dev.fan||0;
    this.swing=dev.swing||0;
    this.mode=dev.mode||0; //0:cool|1:heat

    //build element
    this.elem=el("<div class=\"btn ac\"><div class=\"label\"></div><div class=\"up\"></div><div class=\"temp\"></div><div class=\"down\"></div><div class=\"acfan\"></div><div class=\"swing\"></div><div class=\"mode\"></div></div>");
    this.elem.querySelector(".label").textContent = this.name;
    if(dev.on) this.elem.classList.add("on");

    //ac elements
    this.elements = {
      main: undefined,
      temp: undefined,
      fan: undefined,
      swing: undefined,
      mode: undefined
    };

    //bind actions
    this.elements.temp=this.elem.querySelector(".temp");
    this.elem.querySelector(".up").addEventListener("click", this.temperature_up.bind(this), false);
    this.elem.querySelector(".down").addEventListener("click", this.temperature_down.bind(this), false);

    this.elements.fan = this.elem.querySelector(".acfan");
    this.elements.fan.addEventListener("click", this.fan_change.bind(this), false);

    this.elements.swing=this.elem.querySelector(".swing");
    this.elements.swing.addEventListener("click", this.swing_change.bind(this), false);

    this.elements.mode=this.elem.querySelector(".mode");
    this.elements.mode.addEventListener("click", this.mode_change.bind(this), false);

    this.elem.addEventListener("click", this.changeState.bind(this), false);

    this.renderStatus();
  }

  changeState(){
    this.on=!this.on;
    this.renderStatus();
  }

  temperature_up(event){
    event.stopPropagation();
    this.temp++;
    if(this.temp>25){this.temp=25;return;};
    this.renderStatus();
  }
  temperature_down(event){
    event.stopPropagation();
    this.temp--;
    if(this.temp<18){this.temp=18;return;};
    this.renderStatus();
  }

  fan_change(event){
    event.stopPropagation();
    this.fan = !this.fan;
    this.renderStatus();
  }
  swing_change(event){
    event.stopPropagation();
    this.swing = !this.swing;
    this.renderStatus();
  }
  mode_change(event){
    event.stopPropagation();
    this.mode = !this.mode;
    this.renderStatus();
  }

  renderStatus(){
    this.elements.temp.innerText=this.temp;
    this.setStatus(this.elem, this.on);
    this.setStatus(this.elements.fan, this.fan!=0);
    this.setStatus(this.elements.swing, this.swing!=0);
    this.elements.mode.innerText = this.mode==0?"cool":"heat";
    console.log(this.constructor.name, "|", this.on?"on":"off", "| temp:", this.temp);
  }

  setStatus(el, st){
    if(st)
      el.classList.add("on")
    else
      el.classList.remove("on")
  }

};


class Environment{
  constructor(dev){
    //core
    this.id=dev.id;
    this.zone=dev.zone;
    this.on=dev.on;
    this.name=dev.name||"Environment";

    //custom props
    this.temp = dev.temp;
    this.humidity = dev.humidity;
    this.pressure = dev.pressure;
    this.light = dev.light;

    //build element
    this.elem=el("<div class=\"btn env\"><div class=\"temp\"></div><div class=\"humidity\"></div><div class=\"pressure\"></div><div class=\"light\"></div></div>");
    

    this.tempElem= this.elem.querySelector(".temp");
    this.humidityElem= this.elem.querySelector(".humidity");
    this.pressureElem= this.elem.querySelector(".pressure");
    this.lightElem= this.elem.querySelector(".light");
    

    this.renderStatus();
  }

  renderStatus(){
    this.tempElem.textContent = this.temp;
    this.humidityElem.textContent = this.humidity;
    this.pressureElem.textContent = this.pressure;
    this.lightElem.textContent = this.light;
  }

  changeState(){
    this.on=!this.on;
    if(this.on) this.elem.classList.add("on") 
    else this.elem.classList.remove("on") 
    api.addTask(tasks.set_device, this.id, this.on?1:0);
    // console.log("light|", this.on?"on":"off");
  }


};

class Fan{
  constructor(dev){
    //core
    this.id=dev.id;
    this.zone=dev.zone;
    this.on=dev.on;
    this.name=dev.name||"Fan";

    //build element
    this.elem=el("<div class=\"btn fan\"><div>fan</div><div class=\"up\"></div><div class=\"speed\"><span>-</span></div><div class=\"down\"></div></div>");

    //fan properties
    this.speedMax = 4;
    this.speedMin = 1;
    this.speed = dev.speed;
    this.speedElem = this.elem.querySelector(".speed span");

    //render current status
    this.renderStatus();

    //bind fan actions
    this.elem.querySelector(".up").addEventListener("click", this.speedUp.bind(this), false);
    this.elem.querySelector(".down").addEventListener("click", this.speedDown.bind(this), false);
    this.elem.addEventListener("click", this.changeOnState.bind(this), false);
  }

  renderStatus(){
    //on/off
    if(this.on) this.elem.classList.add("on");
    else this.elem.classList.remove("on");
    //speed
    this.speedElem.textContent = this.speed;
  }

  speedUp(event){
    event.stopPropagation();
    this.speed++;
    if(this.speed>this.speedMax) this.speed=this.speedMax;
    this.renderStatus();
    api.addTask(tasks.fan_speed, this.id, this.speed);
    console.log("fan|", this.on?"on":"off", "| speed", this.speed);
  }

  speedDown(event){
    event.stopPropagation();
    this.speed--;
    if(this.speed==0 && this.on) this.changeOnState();
    if(this.speed<this.speedMin) this.speed=this.speedMin;
    this.renderStatus();
    api.addTask(tasks.fan_speed, this.id, this.speed);
    console.log("fan|", this.on?"on":"off", "| speed", this.speed);
  }

  changeOnState(event){
    this.on=!this.on;
    this.renderStatus();
    api.addTask(tasks.set_on, this.id, this.on?1:0);
    console.log("fan|", this.on?"on":"off", "| speed", this.speed);
  }


};


class Light{
  constructor(dev){
    //core
    this.id=dev.id;
    this.zone=dev.zone;
    this.on=dev.on;
    this.name=dev.name||"Light";

    //build element
    this.elem=el("<div class=\"btn light\"></div>");
    this.elem.textContent = "light[" + this.id +"]";
    if(dev.on) this.elem.classList.add("on");

    //bind actions
    this.elem.addEventListener("click", this.changeState.bind(this), true);

  }

  changeState(){
    this.on=!this.on;
    if(this.on) this.elem.classList.add("on") 
    else this.elem.classList.remove("on") 
    api.addTask(tasks.set_device, this.id, this.on?1:0);
    console.log("light|", this.on?"on":"off");
  }
}

const ui={

  loader:{
    hide: ()=>{
      document.querySelector("div.loader").style.display="none";
    },
    show: ()=>{
      document.querySelector("div.loader").style.display="inline";
    },
    showError: (msg)=>{
      document.querySelector("div.loader>div.loading").style.display="none";
      document.querySelector("div.loader>div.error").style.display="inline";
      ui.loader.retryTimer();
    },
    retryTimer: ()=>{
      ui.loader.retries++;
      if(ui.loader.retries>15){
        ui.loader.retries=0;
        ui.loader.show();
        ui.setup();
      }else{
        document.querySelector("div.loader>div.error").innerText="retry in "+(15-ui.loader.retries);
        setTimeout(ui.loader.retryTimer, 1000);
      }
    },
    retries: 0
  },

  status: {
    elem: undefined,
    setup: ()=>{
      ui.status.elem=document.querySelector("div.wrapper>div.status");
      if(ui.status.elem)
        ui.status.update();
    },
    update: ()=>{
      var time = new Date();
      var minute = time.getMinutes();
      ui.status.elem.innerText='' + time.getHours() + ((minute < 10) ? ':0' : ':') + minute;
      setTimeout(ui.status.update, 60000);
    }
  },

  weather: {
    setup: (data)=>{
      ui.weather.envId=31;//external temp
      ui.weather.elem=document.querySelector("div.wrapper>div.weather");
      ui.weather.update();
      return data; // return promise data
    },
    update: ()=>{
      const el = devices.byId(ui.weather.envId).elem;
      el.classList.add("weather");
      ui.weather.elem.replaceWith(el);
    },
    envId: 0,
    elem: undefined
  },


  setup: ()=>{
    if(typeof devices == 'undefined' || typeof api == 'undefined' || typeof api == 'undefined'){
      setTimeout(ui.setup, 100);
      return;
    }

    //fetch devices from api
    devices.setup()
      .then(ui.weather.setup)
      .then(rooms.setup)
      .then(ui.loader.hide)
      .catch(ui.loader.showError);
    ui.status.setup();
  }
};


const devices = {
  list: [
    {id:0x00, name:'server_node', type: 0, on: 0, val: 0, zone: 0, elem: undefined},
    {id:0x01, name:'server_rf', room:0, val: 0}
  ],
  byZone: (zone)=>{
    let ret = [];
    for (const dev of devices.list) {
      if(dev.zone==zone) ret.push(dev);
    };
    return ret;
  },
  byId: (deviceId)=>{
    for (const dev of devices.list) {
      if(dev.id==deviceId) return dev;
    }
    return undefined;
  },
  setup: ()=>{
    return api.getDeviceList()
       .then(devices._setup_post);
  },
  _setup_post: (data)=>{
    devices.list = [];
    for(const dev of data.devs){
      switch(dev.type){
        case devType.light: devices.list.push(new Light(dev)); break;
        case devType.fan:   devices.list.push(new Fan(dev));   break;
        case devType.env:   devices.list.push(new Environment(dev));   break;
        case devType.ac:    devices.list.push(new AC(dev));    break;
        default:
          console.log("unhandled type:", dev);
          break;
      }
    };
    return devices.list;
  }
};
